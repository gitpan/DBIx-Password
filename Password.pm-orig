package DBIx::Password;
use strict;
use DBI();

@DBIx::Password::ISA = qw ( DBI::db );
($DBIx::Password::VERSION) = ' $Revision: 1.4 $ ' =~ /\$Revision:\s+([^\s]+)/;

#PASSWORD_INSERT

my %driver_cache;

sub connect {
	my ($class, $user) = @_;
	return undef unless $virtual1->{$user};
	my $self;
	my $virtual = $virtual1->{$user};

	$self = DBI->connect($virtual->{connect}
			, $virtual->{'username'}
			, $virtual->{'password'}
			, $virtual->{'attributes'}
			);
	bless $self, $class;
	$driver_cache{$self} = $user;
	return $self;
}

sub getDriver {
	my ($self) = @_;
	unless(ref $self) {
		while(my ($key, $value) = each %$virtual1) {
			return $value->{'driver'} if $self eq $key; 
		}
	} else {
		my $user = $driver_cache{$self};
		return $virtual1->{$user}{'driver'};
	}
}

sub DESTROY {
    my ($self) = @_;
    $self->SUPER::DESTROY;
}

1;

=head1 NAME

DBIx::Password - Allows you to create a global password file for DB passwords

=head1 SYNOPSIS

  use DBIx::Password;
  my $dbh = DBIx::Password->connect($user);
  $dbh->getDriver;
  DBIx::Password::getDriver($user);

=head1 DESCRIPTION

Don't you hate keeping track of database passwords and such throughout
your scripts? How about the problem of changing those passwords 
on a mass scale? This module is one possible solution. When you
go to build this module it will ask you to create virtual users.
For each user you need to specify the database module to use,
the database connect string, the username and the password. You
will be prompted to give a name to this virtual user.
You can add as many as you like.

I would recommend that if you are only using this with
web applications that you change the final permissions on this 
package after it is installed in site_perl such that only
the webserver can read it.

A method called getDriver has been added so that you
can determine what driver is being used (handy for
working out database indepence issues).

Once your are done you can use the connect method that
comes with DBIx-Password and just specify one of the
virtual users you defined while making the module.


BTW I learned the bless hack that is used from Apache::DBI
so some credit should go to the authors of that module.
This is a rewrite of the module Tangent::DB that I did
for slashcode.

Hope you enjoy it.

=head1 INSTALL

Basically:

perl Makefile.PL

make

make test

make install

Be sure to answer the questions as you make the module

=head1 HOME

To find out more information look at: http://www.tangent.org/DBIx-Password/

=head1 AUTHOR

Brian Aker, brian@tangent.org

=head1 SEE ALSO

perl(1). DBI(3).

=cut

